{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"pyramid-flower","text":"<p>Just a celery command to start flower with pyramid celery</p>"},{"location":"modules/","title":"Modules","text":""},{"location":"modules/#pyramid_flower.script.pflower","title":"<code>pflower(ctx, ini, ini_var)</code>","text":"<p>Start flower monitor.</p> Source code in <code>pyramid_flower/script.py</code> <pre><code>@click.command(cls=CeleryCommand, context_settings={\"ignore_unknown_options\": True})\n@click.argument(\"ini\", default=\"development.ini\")\n@click.pass_context\ndef pflower(ctx: click.Context, ini: str, ini_var: str) -&gt; None:\n    \"\"\"Start flower monitor.\"\"\"\n    click.echo(\"Starting flower ...\")\n\n    apply_env_options()\n    # apply_options(sys.argv[0], tornado_argv)\n\n    extract_settings()\n    # setup_logging()\n\n    capp = ctx.obj.app\n    env = bootstrap(ini, options={})\n    registry = env[\"registry\"]\n    app = env[\"app\"]\n    root = env[\"root\"]\n    request = env[\"request\"]\n    closer = env[\"closer\"]\n    setup_app(app, root, request, registry, closer, ini)\n\n    flower_app = Flower(capp=capp, options=options, **settings)\n\n    atexit.register(flower_app.stop)\n    signal.signal(signal.SIGTERM, sigterm_handler)\n\n    if not ctx.obj.quiet:\n        print_banner(capp, \"ssl_options\" in settings)\n\n    with suppress(KeyboardInterrupt, SystemExit):\n        flower_app.start()\n</code></pre>"}]}